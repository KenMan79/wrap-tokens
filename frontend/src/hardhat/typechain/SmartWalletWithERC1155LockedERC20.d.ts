/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SmartWalletWithERC1155LockedERC20Interface
  extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authoriseModule(address,bool)": FunctionFragment;
    "authorised(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrowERC1155(uint256,address,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "enableStaticCall(address,bytes4)": FunctionFragment;
    "enabled(bytes4)": FunctionFragment;
    "erc1155()": FunctionFragment;
    "implementation()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "init(address,address[])": FunctionFragment;
    "invoke(address,uint256,bytes)": FunctionFragment;
    "modules()": FunctionFragment;
    "name()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "returnToERC1155(uint256,address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenId()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "uri()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authoriseModule",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "authorised", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowERC1155",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: void): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableStaticCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "enabled", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "erc1155", values?: void): string;
  encodeFunctionData(functionFragment: "implementation", values?: void): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "invoke",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "modules", values?: void): string;
  encodeFunctionData(functionFragment: "name", values?: void): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: void): string;
  encodeFunctionData(
    functionFragment: "returnToERC1155",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: void): string;
  encodeFunctionData(functionFragment: "tokenId", values?: void): string;
  encodeFunctionData(functionFragment: "totalSupply", values?: void): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uri", values?: void): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authoriseModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorised", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableStaticCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc1155", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnToERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuthorisedModule(address,bool)": EventFragment;
    "EnabledStaticCall(address,bytes4)": EventFragment;
    "Invoked(address,address,uint256,bytes)": EventFragment;
    "OwnerChanged(address)": EventFragment;
    "Received(uint256,address,bytes)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorisedModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledStaticCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class SmartWalletWithERC1155LockedERC20 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SmartWalletWithERC1155LockedERC20Interface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authoriseModule(
      _module: string,
      _value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorised(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    borrowERC1155(
      _amount: BigNumberish,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enableStaticCall(
      _module: string,
      _method: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enabled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    erc1155(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    implementation(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    init(
      _owner: string,
      _modules: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    modules(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    returnToERC1155(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenId(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uri(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authoriseModule(
    _module: string,
    _value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorised(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowERC1155(
    _amount: BigNumberish,
    _from: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enableStaticCall(
    _module: string,
    _method: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enabled(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  erc1155(overrides?: CallOverrides): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  init(
    _owner: string,
    _modules: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  invoke(
    _target: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  modules(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  returnToERC1155(
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uri(overrides?: CallOverrides): Promise<string>;

  staticCall: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    authoriseModule(
      _module: string,
      _value: boolean,
      overrides?: Overrides
    ): Promise<void>;

    authorised(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowERC1155(
      _amount: BigNumberish,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    enableStaticCall(
      _module: string,
      _method: BytesLike,
      overrides?: Overrides
    ): Promise<void>;

    enabled(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    erc1155(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    init(
      _owner: string,
      _modules: string[],
      overrides?: Overrides
    ): Promise<void>;

    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<string>;

    modules(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    returnToERC1155(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<void>;

    setOwner(_newOwner: string, overrides?: Overrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    uri(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    AuthorisedModule(module: string | null, value: null): EventFilter;

    EnabledStaticCall(
      module: string | null,
      method: BytesLike | null
    ): EventFilter;

    Invoked(
      module: string | null,
      target: string | null,
      value: BigNumberish | null,
      data: null
    ): EventFilter;

    OwnerChanged(owner: null): EventFilter;

    Received(
      value: BigNumberish | null,
      sender: string | null,
      data: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    allowance(owner: string, spender: string): Promise<BigNumber>;
    approve(spender: string, amount: BigNumberish): Promise<BigNumber>;
    authoriseModule(_module: string, _value: boolean): Promise<BigNumber>;
    authorised(arg0: string): Promise<BigNumber>;
    balanceOf(account: string): Promise<BigNumber>;
    borrowERC1155(
      _amount: BigNumberish,
      _from: string,
      _to: string
    ): Promise<BigNumber>;
    decimals(): Promise<BigNumber>;
    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish
    ): Promise<BigNumber>;
    enableStaticCall(_module: string, _method: BytesLike): Promise<BigNumber>;
    enabled(arg0: BytesLike): Promise<BigNumber>;
    erc1155(): Promise<BigNumber>;
    implementation(): Promise<BigNumber>;
    increaseAllowance(
      spender: string,
      addedValue: BigNumberish
    ): Promise<BigNumber>;
    init(_owner: string, _modules: string[]): Promise<BigNumber>;
    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike
    ): Promise<BigNumber>;
    modules(): Promise<BigNumber>;
    name(): Promise<BigNumber>;
    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ): Promise<BigNumber>;
    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ): Promise<BigNumber>;
    owner(): Promise<BigNumber>;
    returnToERC1155(_amount: BigNumberish, _to: string): Promise<BigNumber>;
    setOwner(_newOwner: string): Promise<BigNumber>;
    supportsInterface(interfaceId: BytesLike): Promise<BigNumber>;
    symbol(): Promise<BigNumber>;
    tokenId(): Promise<BigNumber>;
    totalSupply(): Promise<BigNumber>;
    transfer(recipient: string, amount: BigNumberish): Promise<BigNumber>;
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish
    ): Promise<BigNumber>;
    uri(): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(owner: string, spender: string): Promise<PopulatedTransaction>;
    approve(
      spender: string,
      amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    authoriseModule(
      _module: string,
      _value: boolean
    ): Promise<PopulatedTransaction>;
    authorised(arg0: string): Promise<PopulatedTransaction>;
    balanceOf(account: string): Promise<PopulatedTransaction>;
    borrowERC1155(
      _amount: BigNumberish,
      _from: string,
      _to: string
    ): Promise<PopulatedTransaction>;
    decimals(): Promise<PopulatedTransaction>;
    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish
    ): Promise<PopulatedTransaction>;
    enableStaticCall(
      _module: string,
      _method: BytesLike
    ): Promise<PopulatedTransaction>;
    enabled(arg0: BytesLike): Promise<PopulatedTransaction>;
    erc1155(): Promise<PopulatedTransaction>;
    implementation(): Promise<PopulatedTransaction>;
    increaseAllowance(
      spender: string,
      addedValue: BigNumberish
    ): Promise<PopulatedTransaction>;
    init(_owner: string, _modules: string[]): Promise<PopulatedTransaction>;
    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike
    ): Promise<PopulatedTransaction>;
    modules(): Promise<PopulatedTransaction>;
    name(): Promise<PopulatedTransaction>;
    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ): Promise<PopulatedTransaction>;
    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ): Promise<PopulatedTransaction>;
    owner(): Promise<PopulatedTransaction>;
    returnToERC1155(
      _amount: BigNumberish,
      _to: string
    ): Promise<PopulatedTransaction>;
    setOwner(_newOwner: string): Promise<PopulatedTransaction>;
    supportsInterface(interfaceId: BytesLike): Promise<PopulatedTransaction>;
    symbol(): Promise<PopulatedTransaction>;
    tokenId(): Promise<PopulatedTransaction>;
    totalSupply(): Promise<PopulatedTransaction>;
    transfer(
      recipient: string,
      amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    uri(): Promise<PopulatedTransaction>;
  };
}
