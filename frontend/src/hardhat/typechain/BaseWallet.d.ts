/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BaseWalletInterface extends ethers.utils.Interface {
  functions: {
    "authoriseModule(address,bool)": FunctionFragment;
    "authorised(address)": FunctionFragment;
    "enableStaticCall(address,bytes4)": FunctionFragment;
    "enabled(bytes4)": FunctionFragment;
    "implementation()": FunctionFragment;
    "init(address,address[])": FunctionFragment;
    "invoke(address,uint256,bytes)": FunctionFragment;
    "modules()": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authoriseModule",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "authorised", values: [string]): string;
  encodeFunctionData(
    functionFragment: "enableStaticCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "enabled", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "implementation", values?: void): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "invoke",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "modules", values?: void): string;
  encodeFunctionData(functionFragment: "owner", values?: void): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "authoriseModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorised", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableStaticCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {
    "AuthorisedModule(address,bool)": EventFragment;
    "EnabledStaticCall(address,bytes4)": EventFragment;
    "Invoked(address,address,uint256,bytes)": EventFragment;
    "OwnerChanged(address)": EventFragment;
    "Received(uint256,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorisedModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledStaticCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
}

export class BaseWallet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BaseWalletInterface;

  functions: {
    authoriseModule(
      _module: string,
      _value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorised(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    enableStaticCall(
      _module: string,
      _method: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enabled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    implementation(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    init(
      _owner: string,
      _modules: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    modules(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  authoriseModule(
    _module: string,
    _value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorised(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  enableStaticCall(
    _module: string,
    _method: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enabled(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  init(
    _owner: string,
    _modules: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  invoke(
    _target: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  modules(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  staticCall: {
    authoriseModule(
      _module: string,
      _value: boolean,
      overrides?: Overrides
    ): Promise<void>;

    authorised(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    enableStaticCall(
      _module: string,
      _method: BytesLike,
      overrides?: Overrides
    ): Promise<void>;

    enabled(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    init(
      _owner: string,
      _modules: string[],
      overrides?: Overrides
    ): Promise<void>;

    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<string>;

    modules(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    setOwner(_newOwner: string, overrides?: Overrides): Promise<void>;
  };

  filters: {
    AuthorisedModule(module: string | null, value: null): EventFilter;

    EnabledStaticCall(
      module: string | null,
      method: BytesLike | null
    ): EventFilter;

    Invoked(
      module: string | null,
      target: string | null,
      value: BigNumberish | null,
      data: null
    ): EventFilter;

    OwnerChanged(owner: null): EventFilter;

    Received(
      value: BigNumberish | null,
      sender: string | null,
      data: null
    ): EventFilter;
  };

  estimateGas: {
    authoriseModule(_module: string, _value: boolean): Promise<BigNumber>;
    authorised(arg0: string): Promise<BigNumber>;
    enableStaticCall(_module: string, _method: BytesLike): Promise<BigNumber>;
    enabled(arg0: BytesLike): Promise<BigNumber>;
    implementation(): Promise<BigNumber>;
    init(_owner: string, _modules: string[]): Promise<BigNumber>;
    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike
    ): Promise<BigNumber>;
    modules(): Promise<BigNumber>;
    owner(): Promise<BigNumber>;
    setOwner(_newOwner: string): Promise<BigNumber>;
  };

  populateTransaction: {
    authoriseModule(
      _module: string,
      _value: boolean
    ): Promise<PopulatedTransaction>;
    authorised(arg0: string): Promise<PopulatedTransaction>;
    enableStaticCall(
      _module: string,
      _method: BytesLike
    ): Promise<PopulatedTransaction>;
    enabled(arg0: BytesLike): Promise<PopulatedTransaction>;
    implementation(): Promise<PopulatedTransaction>;
    init(_owner: string, _modules: string[]): Promise<PopulatedTransaction>;
    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike
    ): Promise<PopulatedTransaction>;
    modules(): Promise<PopulatedTransaction>;
    owner(): Promise<PopulatedTransaction>;
    setOwner(_newOwner: string): Promise<PopulatedTransaction>;
  };
}
